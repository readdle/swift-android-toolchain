From de54a9145156c61d5432896c51b0f9ce38048ab4 Mon Sep 17 00:00:00 2001
From: Alexander Smarus <bender@readdle.com>
Date: Wed, 11 Jan 2023 15:15:06 +0200
Subject: [PATCH] Handle HTTP Basic Auth and auth failure

---
 .../URLSession/URLSessionTask.swift           | 159 ++++++++++--------
 1 file changed, 88 insertions(+), 71 deletions(-)

diff --git a/Sources/FoundationNetworking/URLSession/URLSessionTask.swift b/Sources/FoundationNetworking/URLSession/URLSessionTask.swift
index af6e7722..17aa1689 100644
--- a/Sources/FoundationNetworking/URLSession/URLSessionTask.swift
+++ b/Sources/FoundationNetworking/URLSession/URLSessionTask.swift
@@ -1105,7 +1105,9 @@ extension _ProtocolClient : URLProtocolClient {
                     let proposedCredential: URLCredential?
                     let last = task._protocolLock.performLocked { task._lastCredentialUsedFromStorageDuringAuthentication }
                     
-                    if last?.credential != credential {
+                    if last?.credential != nil && credential == nil {
+                        proposedCredential = last?.credential
+                    } else if last?.credential != credential {
                         proposedCredential = credential
                     } else {
                         proposedCredential = nil
@@ -1162,71 +1164,7 @@ extension _ProtocolClient : URLProtocolClient {
             }
         }
         
-        switch session.behaviour(for: task) {
-        case .taskDelegate(let delegate):
-            if let downloadDelegate = delegate as? URLSessionDownloadDelegate, let downloadTask = task as? URLSessionDownloadTask {
-                let temporaryFileURL = urlProtocol.properties[URLProtocol._PropertyKey.temporaryFileURL] as! URL
-                session.delegateQueue.addOperation {
-                    downloadDelegate.urlSession(session, downloadTask: downloadTask, didFinishDownloadingTo: temporaryFileURL)
-                }
-            } else if let webSocketDelegate = delegate as? URLSessionWebSocketDelegate,
-                      let webSocketTask = task as? URLSessionWebSocketTask {
-                session.delegateQueue.addOperation {
-                    webSocketDelegate.urlSession(session, webSocketTask: webSocketTask, didCloseWith: webSocketTask.closeCode, reason: webSocketTask.closeReason)
-                }
-            }
-            session.delegateQueue.addOperation {
-                guard task.state != .completed else { return }
-                delegate.urlSession(session, task: task, didCompleteWithError: nil)
-                task.state = .completed
-                session.workQueue.async {
-                    session.taskRegistry.remove(task)
-                }
-            }
-        case .noDelegate:
-            guard task.state != .completed else { break }
-            task.state = .completed
-            session.workQueue.async {
-                session.taskRegistry.remove(task)
-            }
-        case .dataCompletionHandler(let completion),
-             .dataCompletionHandlerWithTaskDelegate(let completion, _):
-            nonisolated(unsafe) let nonisolatedURLProtocol = urlProtocol
-            let dataCompletion : @Sendable () -> () = {
-                guard task.state != .completed else { return }
-                completion(nonisolatedURLProtocol.properties[URLProtocol._PropertyKey.responseData] as? Data ?? Data(), task.response, nil)
-                task.state = .completed
-                session.workQueue.async {
-                    session.taskRegistry.remove(task)
-                }
-            }
-            if task._callCompletionHandlerInline {
-                dataCompletion()
-            } else {
-                session.delegateQueue.addOperation {
-                    dataCompletion()
-                }
-            }
-        case .downloadCompletionHandler(let completion),
-             .downloadCompletionHandlerWithTaskDelegate(let completion, _):
-            nonisolated(unsafe) let nonisolatedURLProtocol = urlProtocol
-            let downloadCompletion : @Sendable () -> () = {
-                guard task.state != .completed else { return }
-                completion(nonisolatedURLProtocol.properties[URLProtocol._PropertyKey.temporaryFileURL] as? URL, task.response, nil)
-                task.state = .completed
-                session.workQueue.async {
-                    session.taskRegistry.remove(task)
-                }
-            }
-            if task._callCompletionHandlerInline {
-                downloadCompletion()
-            } else {
-                session.delegateQueue.addOperation {
-                    downloadCompletion()
-                }
-            }
-        }
-        task._invalidateProtocol()
+        urlProtocolDidComplete(urlProtocol)
     }
 
     func urlProtocol(_ protocol: URLProtocol, didCancel challenge: URLAuthenticationChallenge) {
@@ -1269,14 +1207,21 @@ extension _ProtocolClient : URLProtocolClient {
         }
         
         @Sendable func attemptProceedingWithDefaultCredential() {
-            if let credential = challenge.proposedCredential {
+            let credential: URLCredential? = {
+                guard let proposedCredential = challenge.proposedCredential else {
+                    return nil
+                }
                 let last = task._protocolLock.performLocked { task._lastCredentialUsedFromStorageDuringAuthentication }
                 
-                if last?.credential != credential {
-                    proceed(using: credential)
-                } else {
-                    task.cancel()
+                guard proposedCredential != last?.credential else {
+                    return nil
                 }
+                return proposedCredential
+            }()
+            if let credential = credential {
+                proceed(using: credential)
+            } else {
+                urlProtocolDidComplete(`protocol`)
             }
         }
         
@@ -1414,6 +1359,78 @@ extension _ProtocolClient : URLProtocolClient {
     func urlProtocol(_ protocol: URLProtocol, wasRedirectedTo request: URLRequest, redirectResponse: URLResponse) {
         fatalError("The URLSession swift-corelibs-foundation implementation doesn't currently handle redirects directly.")
     }
+    
+    private func urlProtocolDidComplete(_ urlProtocol: URLProtocol) {
+        guard let task = urlProtocol.task else { fatalError("Received response, but there's no task.") }
+        guard let session = task.session as? URLSession else { fatalError("Task not associated with URLSession.") }
+
+        switch session.behaviour(for: task) {
+        case .taskDelegate(let delegate):
+            if let downloadDelegate = delegate as? URLSessionDownloadDelegate, let downloadTask = task as? URLSessionDownloadTask {
+                let temporaryFileURL = urlProtocol.properties[URLProtocol._PropertyKey.temporaryFileURL] as! URL
+                session.delegateQueue.addOperation {
+                    downloadDelegate.urlSession(session, downloadTask: downloadTask, didFinishDownloadingTo: temporaryFileURL)
+                }
+            } else if let webSocketDelegate = delegate as? URLSessionWebSocketDelegate,
+                      let webSocketTask = task as? URLSessionWebSocketTask {
+                session.delegateQueue.addOperation {
+                    webSocketDelegate.urlSession(session, webSocketTask: webSocketTask, didCloseWith: webSocketTask.closeCode, reason: webSocketTask.closeReason)
+                }
+            }
+            session.delegateQueue.addOperation {
+                guard task.state != .completed else { return }
+                delegate.urlSession(session, task: task, didCompleteWithError: nil)
+                task.state = .completed
+                session.workQueue.async {
+                    session.taskRegistry.remove(task)
+                }
+            }
+        case .noDelegate:
+            guard task.state != .completed else { break }
+            task.state = .completed
+            session.workQueue.async {
+                session.taskRegistry.remove(task)
+            }
+        case .dataCompletionHandler(let completion),
+             .dataCompletionHandlerWithTaskDelegate(let completion, _):
+            nonisolated(unsafe) let nonisolatedURLProtocol = urlProtocol
+            let dataCompletion : @Sendable () -> () = {
+                guard task.state != .completed else { return }
+                completion(nonisolatedURLProtocol.properties[URLProtocol._PropertyKey.responseData] as? Data ?? Data(), task.response, nil)
+                task.state = .completed
+                session.workQueue.async {
+                    session.taskRegistry.remove(task)
+                }
+            }
+            if task._callCompletionHandlerInline {
+                dataCompletion()
+            } else {
+                session.delegateQueue.addOperation {
+                    dataCompletion()
+                }
+            }
+        case .downloadCompletionHandler(let completion),
+             .downloadCompletionHandlerWithTaskDelegate(let completion, _):
+            nonisolated(unsafe) let nonisolatedURLProtocol = urlProtocol
+            let downloadCompletion : @Sendable () -> () = {
+                guard task.state != .completed else { return }
+                completion(nonisolatedURLProtocol.properties[URLProtocol._PropertyKey.temporaryFileURL] as? URL, task.response, nil)
+                task.state = .completed
+                session.workQueue.async {
+                    session.taskRegistry.remove(task)
+                }
+            }
+            if task._callCompletionHandlerInline {
+                downloadCompletion()
+            } else {
+                session.delegateQueue.addOperation {
+                    downloadCompletion()
+                }
+            }
+        }
+        task._invalidateProtocol()
+    }
+    
 }
 extension URLSessionTask {
     typealias _AuthHandler = ((URLSessionTask, URLSession.AuthChallengeDisposition, URLCredential?) -> ())
-- 
2.46.0

