From 9578d94d5a45f6abd6e18b64c31cd08bf6ae9b1e Mon Sep 17 00:00:00 2001
From: Andrew Druk <adruk@readdle.com>
Date: Mon, 23 Dec 2024 20:19:30 +0200
Subject: [PATCH] Fix dispatch source write issue

---
 .../URLSession/libcurl/EasyHandle.swift       |  2 +-
 .../URLSession/libcurl/MultiHandle.swift      | 28 +++++++++++++++++--
 2 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/Sources/FoundationNetworking/URLSession/libcurl/EasyHandle.swift b/Sources/FoundationNetworking/URLSession/libcurl/EasyHandle.swift
index cd8c473b..4b3482b1 100644
--- a/Sources/FoundationNetworking/URLSession/libcurl/EasyHandle.swift
+++ b/Sources/FoundationNetworking/URLSession/libcurl/EasyHandle.swift
@@ -351,7 +351,7 @@ extension _EasyHandle {
     }
 
     func set(timeout value: Int) {
-        try! CFURLSession_easy_setopt_long(rawHandle, CFURLSessionOptionTIMEOUT, numericCast(value)).asError()
+        try! CFURLSession_easy_setopt_long(rawHandle, CFURLSessionOptionCONNECTTIMEOUT, numericCast(value)).asError()
     }
 
     func getTimeoutIntervalSpent() -> Double {
diff --git a/Sources/FoundationNetworking/URLSession/libcurl/MultiHandle.swift b/Sources/FoundationNetworking/URLSession/libcurl/MultiHandle.swift
index 8eb32ae8..199e4688 100644
--- a/Sources/FoundationNetworking/URLSession/libcurl/MultiHandle.swift
+++ b/Sources/FoundationNetworking/URLSession/libcurl/MultiHandle.swift
@@ -528,12 +528,17 @@ fileprivate class _SocketSources {
     var readSource: DispatchSource?
     var writeSource: DispatchSource?
 
+    var readDupSocket: Int32?
+    var writeDupSocket: Int32?
+
     func createReadSource(socket: CFURLSession_socket_t, queue: DispatchQueue, handler: DispatchWorkItem) {
         guard readSource == nil else { return }
 #if os(Windows)
         let s = DispatchSource.makeReadSource(handle: HANDLE(bitPattern: Int(socket))!, queue: queue)
 #else
-        let s = DispatchSource.makeReadSource(fileDescriptor: socket, queue: queue)
+        let dupSocket = dup(socket)
+        readDupSocket = dupSocket
+        let s = DispatchSource.makeReadSource(fileDescriptor: dupSocket, queue: queue)
 #endif
         s.setEventHandler(handler: handler)
         readSource = s as? DispatchSource
@@ -545,13 +550,32 @@ fileprivate class _SocketSources {
 #if os(Windows)
         let s = DispatchSource.makeWriteSource(handle: HANDLE(bitPattern: Int(socket))!, queue: queue)
 #else
-        let s = DispatchSource.makeWriteSource(fileDescriptor: socket, queue: queue)
+        let dupSocket = dup(socket)
+        writeDupSocket = dupSocket
+        let s = DispatchSource.makeWriteSource(fileDescriptor: dupSocket, queue: queue)
 #endif
         s.setEventHandler(handler: handler)
         writeSource = s as? DispatchSource
         s.resume()
     }
 
+    deinit {
+        if let readDupSocket = readDupSocket {
+            let cancelWorkItem = DispatchWorkItem(block: {
+                close(readDupSocket)
+            })
+            readSource?.setCancelHandler(handler: cancelWorkItem)
+            readSource?.cancel()
+        }
+        if let writeDupSocket = writeDupSocket {
+            let cancelWorkItem = DispatchWorkItem(block: {
+                close(writeDupSocket)
+            })
+            writeSource?.setCancelHandler(handler: cancelWorkItem)
+            writeSource?.cancel()
+        }
+    }
+
     func tearDown(handle: URLSession._MultiHandle, socket: CFURLSession_socket_t, queue: DispatchQueue) {
         handle.cancelWorkItem(for: socket) // There could be pending register action which needs to be cancelled
         
-- 
2.46.0

