From d403cbb5aa39add8631c5a0fa9aed9e3b7a6aee9 Mon Sep 17 00:00:00 2001
From: Andrew Druk <adruk@readdle.com>
Date: Sat, 29 Mar 2025 15:00:55 +0200
Subject: [PATCH] Add Range<AttributedString.Index>.init(location:length:in:)

---
 .../AttributedString/Conversion.swift            | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/Sources/FoundationEssentials/AttributedString/Conversion.swift b/Sources/FoundationEssentials/AttributedString/Conversion.swift
index acaee31..dd4afd1 100644
--- a/Sources/FoundationEssentials/AttributedString/Conversion.swift
+++ b/Sources/FoundationEssentials/AttributedString/Conversion.swift
@@ -466,6 +466,22 @@ extension Range where Bound == AttributedString.Index {
         let start = bstr.utf16.index(bstr.startIndex, offsetBy: range.location)
         let end = bstr.utf16.index(start, offsetBy: range.length)
 
+        guard start >= string.startIndex._value, end <= string.endIndex._value else { return nil }
+        self.init(uncheckedBounds: (.init(start), .init(end)))
+    }
+#else
+    public init?<S: AttributedStringProtocol>(location: Int, length: Int, in string: S) {
+        // FIXME: This can return indices addressing trailing surrogates, which isn't a thing
+        // FIXME: AttributedString is normally prepared to handle.
+        // FIXME: Consider rounding everything down to the nearest scalar boundary.
+        guard location >= 0, length >= 0 else { return nil }
+        let endOffset = location + length
+        let bstr = string.__guts.string
+        guard endOffset <= bstr.utf16.count else { return nil }
+
+        let start = bstr.utf16.index(bstr.startIndex, offsetBy: location)
+        let end = bstr.utf16.index(start, offsetBy: length)
+
         guard start >= string.startIndex._value, end <= string.endIndex._value else { return nil }
         self.init(uncheckedBounds: (.init(start), .init(end)))
     }
-- 
2.46.0

